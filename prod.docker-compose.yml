# Docker Compose file for TueSearch PROD SERVER

version: '3'

volumes:
  tuesearch-percona-server:
  tuesearch-models:

networks:
  mysql_net:
    ipam:
      config:
        - subnet: 172.20.0.0/24

services:
  ############################################################
  # Nginx Server
  ############################################################
  nginx:
    image: nginx
    ports:
      - '80:80'
      - '443:443'
    restart: unless-stopped
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - mysql_net
  ############################################################
  # MySQL models
  ############################################################
  mysql:
    image: ghcr.io/tuesearch/search-engine/database-server:latest
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_HOST: '%'
    ports:
      - '3306:3306'
    env_file:
      - .mysql.env
    volumes:
      - tuesearch-percona-server:/var/lib/mysql
    networks:
      - mysql_net
  ############################################################
  # Initialize models.
  # Feed the models with initial jobs and initial documents.
  # Will run once.
  ############################################################
  initialize_database:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: initialize_database
    depends_on:
      - mysql
    restart: 'on-failure'
    command: 'python3 -m scripts.migration'
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - mysql_net
  ############################################################
  # Send the crawler 10 times to feed the models with some
  # meaningful documents.
  # Will run once.
  ############################################################
  crawl:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: crawl
    restart: 'unless-stopped'
    depends_on:
      - mysql
      - initialize_database
    command: 'python3 -m crawler.main'
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - mysql_net
  ############################################################
  # Build indexer.
  ############################################################
  build_inverted_index:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: build_inverted_index
    depends_on:
      - mysql
      - initialize_database
      - crawl
    restart: 'on-failure'
    command: 'python3 -m backend.build_inverted_index'
    env_file:
      - .env
    volumes:
      - .:/app
      - tuesearch-models:/opt/tuesearch/data/
    networks:
      - mysql_net
  ############################################################
  # Build rankers.
  ############################################################
  build_ranker:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: build_ranker
    depends_on:
      - mysql
      - initialize_database
      - crawl
      - build_inverted_index
    restart: 'on-failure'
    command: 'python3 -m backend.build_ranker'
    env_file:
      - .env
    volumes:
      - .:/app
      - tuesearch-models:/opt/tuesearch/data/
    networks:
      - mysql_net
  ############################################################
  # Start backend.
  # Persistent process.
  ############################################################
  backend_server:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: backend_server
    ports:
      - '4000:4000'
    depends_on:
      - mysql
      - initialize_database
      - crawl
      - build_inverted_index
      - build_ranker
    restart: 'always'
    command: 'python3 -m backend.app'
    env_file:
      - .env
    volumes:
      - .:/app
      - tuesearch-models:/opt/tuesearch/data/
    networks:
      - mysql_net
  ############################################################
  # Start frontend.
  # Persistent process.
  ############################################################
  frontend_server:
    image: ghcr.io/tuesearch/search-engine/frontend-server:latest
    container_name: frontend_server
    ports:
      - '5000:5000'
    restart: 'always'
    command: serve -s build -l 5000
    networks:
      - mysql_net

  ############################################################
  # Start Watchtower
  # Watchtower will check for new images every 5 minutes and
  # update the running containers.
  ############################################################
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    environment:
      - WATCHTOWER_POLL_INTERVAL=500
      - WATCHTOWER_CLEANUP=true
