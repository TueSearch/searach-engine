# Docker Compose file for TueSearch PROD SERVER

version: '3.9'

volumes:
  tuesearch-percona-server:
  tuesearch-models:

services:
  ############################################################
  # Nginx Server
  ############################################################
  nginx:
    image: nginx
    ports:
      - '80:80'
      - '443:443'
    restart: always
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - mysql_net
  ############################################################
  # MySQL models
  ############################################################
  mysql:
    image: ghcr.io/tuesearch/search-engine/database-server:latest
    container_name: mysql
    restart: always
    env_file:
      - prod.env
    volumes:
      - tuesearch-percona-server:/var/lib/mysql
    networks:
      - mysql_net
  ############################################################
  # Viewing data
  ############################################################
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    depends_on:
      - mysql
    env_file:
      - prod.env
    restart: always
    networks:
      - mysql_net
  ############################################################
  # Initialize models.
  # Feed the models with initial jobs and initial documents.
  # Will run once.
  ############################################################
  initialize_database:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: initialize_database
    depends_on:
      - mysql
    restart: 'on-failure'
    command: 'python3 -m scripts.initialize_database'
    env_file:
      - prod.env
    networks:
      - mysql_net
  ############################################################
  # Start manager.
  ############################################################
  manager:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: manager
    restart: 'always'
    depends_on:
      - mysql
    command: 'gunicorn -w 8 -b 0.0.0.0:6000 crawler.manager.main:app'
    env_file:
      - prod.env
    networks:
      - mysql_net
  ############################################################
  # Build indexer.
  ############################################################
  build_index:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: build_index
    depends_on:
      - mysql
    restart: 'on-failure'
    command: 'python3 -m backend.build_index'
    env_file:
      - prod.env
    volumes:
      - tuesearch:/opt/tuesearch
    networks:
      - mysql_net
  ############################################################
  # Build rankers.
  ############################################################
  build_metrics:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: build_metrics
    depends_on:
      - mysql
    restart: 'on-failure'
    command: 'python3 -m backend.build_metrics'
    env_file:
      - prod.env
    volumes:
      - tuesearch:/opt/tuesearch
    networks:
      - mysql_net
  ############################################################
  # Start backend.
  # Persistent process.
  ############################################################
  backend_server:
    image: ghcr.io/tuesearch/search-engine/backend-server:latest
    container_name: backend_server
    depends_on:
      - mysql
    restart: 'always'
    command: 'gunicorn -w 1 -b 0.0.0.0:4000 backend.app:app'
    env_file:
      - prod.env
    volumes:
      - tuesearch:/opt/tuesearch
    networks:
      - mysql_net
  ############################################################
  # Start frontend.
  # Persistent process.
  ############################################################
  frontend_server:
    image: ghcr.io/tuesearch/search-engine/frontend-server:latest
    container_name: frontend_server
    restart: 'always'
    command: serve -s build -l 5000
  ############################################################
  # Start Watchtower
  # Watchtower will check for new images every 5 minutes and
  # update the running containers.
  ############################################################
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    environment:
      - WATCHTOWER_POLL_INTERVAL=500
      - WATCHTOWER_CLEANUP=true
